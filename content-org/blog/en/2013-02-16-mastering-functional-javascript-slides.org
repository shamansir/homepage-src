#+title: "Mastering Functional JavaScript Lecture Slides"
#+publishDate: <2013-02-16T22:23>
#+tags: javascript functional-programming
#+hugo_section: blog-en

In JavaScript, like, say, in Python, functions are also objects. It
gives developer the opportunity to write pure (or not so, since there
are no native monads support ;) ) functional code. Most people among us
do easily forget about this fact, but it is still true and, what's truly
great, it was true from the start.

These slides are supposed to re-introduce to you the mighty power of
functions in JS. No /map/ / /filter/, since they're trivial, but it's
more about /deferring/, /queueing/ and /composing/ functions with
few-lined chunks of code, plus some general tricks with them, and also
what profit you may take out of all of this stuff. No techniques that
will only come in new versions or, instead, just were introduced:
totally plain old [good] JavaScript.

However, a bit of basics at the start are also there, of course.

OK, Here we go:

[[https://speakerdeck.com/shamansir/mastering-functional-javascript][[[file:%7B%7B%20get_figure(slug,%20'first_slide.png')%20%7D%7D]]]]

*** Links
:PROPERTIES:
:CUSTOM_ID: links
:END:
Links to the examples:

- Deferred functions:
  - [[http://codepen.io/shamansir/pen/HskmE][codepen.io/shamansir/pen/HskmE]]
    /(parser example)/
  - [[http://codepen.io/shamansir/pen/kBzJe][codepen.io/shamansir/pen/kBzJe]]
- Partial applications:
  - [[http://codepen.io/shamansir/pen/xCrgz][codepen.io/shamansir/pen/xCrgz]]
- Queues of functions:
  - [[http://codepen.io/shamansir/pen/AaHqy][codepen.io/shamansir/pen/AaHqy]]
- Composed functions:
  - [[http://codepen.io/shamansir/pen/Funwt][codepen.io/shamansir/pen/Funwt]]

Lyfe.js: [[http://bitbucket.org/balpha/lyfe][bitbucket.org/balpha/lyfe]]
Article on lyfe.js:
[[http://balpha.de/2011/06/introducing-lyfe-yield-in-javascript][Introducing
Lyfe: yield in JavaScript]]
